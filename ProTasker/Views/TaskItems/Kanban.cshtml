@model ProTasker.Models.KanbanViewModel
@{
    ViewData["Title"] = "Kanban Board";
}

<h2 class="text-center mb-4">@ViewData["Title"]</h2>

<input type="hidden" id="projectId" value="@Model.ProjectId" />

<!-- Add Task Section -->
<div class="mb-4">
    @if (User.Identity.IsAuthenticated)
    {
        <div class="input-group mb-3 w-50 shadow-sm">
            <input type="text" class="form-control" id="taskTitle" placeholder="New task title..." />
            <button id="addTaskBtn" type="button" class="btn btn-primary">Add Task</button>
        </div>
    }
    else
    {
        <div class="alert alert-warning w-50 shadow-sm">
            Please
            <a asp-area="Identity"
               asp-page="/Account/Login"
               asp-route-returnUrl="@Url.Action("Kanban", "TaskItems", new { projectId = Model.ProjectId })"
               class="fw-bold">
                log in
            </a>
            to add new tasks.
        </div>
    }
</div>

<!-- Kanban Board Columns -->
<div class="row kanban-board g-3">
    <div class="col-md-4">
        <h4 class="text-center text-primary">To Do</h4>
        <ul id="todoList" class="list-group min-vh-50 border rounded p-2 bg-light">
            @foreach (var task in Model.Todo)
            {
                <li class="list-group-item mb-2 task-item shadow-sm" data-id="@task.Id">@task.Title</li>
            }
        </ul>
    </div>
    <div class="col-md-4">
        <h4 class="text-center text-warning">In Progress</h4>
        <ul id="inProgressList" class="list-group min-vh-50 border rounded p-2 bg-light">
            @foreach (var task in Model.InProgress)
            {
                <li class="list-group-item mb-2 task-item shadow-sm" data-id="@task.Id">@task.Title</li>
            }
        </ul>
    </div>
    <div class="col-md-4">
        <h4 class="text-center text-success">Done</h4>
        <ul id="doneList" class="list-group min-vh-50 border rounded p-2 bg-light">
            @foreach (var task in Model.Done)
            {
                <li class="list-group-item mb-2 task-item shadow-sm" data-id="@task.Id">@task.Title</li>
            }
        </ul>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/ui/1.13.1/jquery-ui.min.js"></script>
    <script>
        $(function () {
            var statusMap = {
                "todoList": "Todo",
                "inProgressList": "InProgress",
                "doneList": "Done"
            };

            var isAuthenticated = '@User.Identity.IsAuthenticated'.toLowerCase() === 'true';

            if (isAuthenticated) {
                makeTasksDraggable();

                $(".list-group").droppable({
                    accept: ".task-item",
                    drop: function (event, ui) {
                        var taskId = ui.draggable.data("id");
                        var listId = $(this).attr("id");
                        var newStatus = statusMap[listId];

                        $(ui.draggable).detach().appendTo($(this));

                        $.post("/TaskItems/UpdateStatus", { id: taskId, status: newStatus });
                    }
                });

                $("#addTaskBtn").on("click", function () {
                    var title = $("#taskTitle").val().trim();
                    var projectId = $("#projectId").val();

                    if (!title) return;

                    $.post("/TaskItems/Create", { projectId: projectId, title: title }, function (data) {
                        var newTask = $('<li class="list-group-item mb-2 task-item shadow-sm" data-id="' + data.id + '">' + data.title + '</li>');
                        $("#todoList").append(newTask);
                        $("#taskTitle").val("");
                        makeTasksDraggable();
                    });
                });
            }

            function makeTasksDraggable() {
                $(".task-item").draggable({
                    helper: "clone",
                    revert: "invalid"
                });
            }
        });
    </script>
}
