@model IEnumerable<ProTasker.Models.Project>
@using ProTasker.Models

@{
    ViewData["Title"] = "Projects - Kanban Board";
}

<h2>Projects - Kanban Board</h2>

@foreach (var project in Model)
{
    <h3>@project.Name</h3>
    <div class="row">
        @foreach (ProTasker.Models.TaskStatus status in Enum.GetValues(typeof(ProTasker.Models.TaskStatus)))
        {
            <div class="col-md-4">
                <h5>@status</h5>
                <ul class="list-group task-column" data-status="@status">
                    @foreach (var task in project.Tasks.Where(t => t.Status == status))
                    {
                        <li class="list-group-item" draggable="true" data-task-id="@task.Id">
                            @task.Title
                        </li>
                    }
                </ul>
            </div>
        }
    </div>
    <form asp-controller="TaskItems" asp-action="Create" method="post" class="mt-3">
        <input type="hidden" name="projectId" value="@project.Id" />
        <input type="text" name="title" placeholder="New Task..." class="form-control w-25 d-inline" />
        <button type="submit" class="btn btn-primary">Add Task</button>
    </form>
    <hr />
}

@section Scripts {
    <script>
        const taskItems = document.querySelectorAll('[draggable="true"]');
        const columns = document.querySelectorAll('.task-column');

        taskItems.forEach(task => {
            task.addEventListener('dragstart', e => {
                e.dataTransfer.setData('text/plain', task.dataset.taskId);
            });
        });

        columns.forEach(col => {
            col.addEventListener('dragover', e => e.preventDefault());
            col.addEventListener('drop', async e => {
                e.preventDefault();
                const taskId = e.dataTransfer.getData('text/plain');
                const status = col.dataset.status;

                await fetch('/TaskItems/UpdateStatus', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `taskId=${taskId}&status=${status}`
                });

                location.reload();
            });
        });
    </script>
}
